/**
 * GESTI√ìN DE ADMINISTRACI√ìN - VERSI√ìN AUTOSUFICIENTE
 * No depende de funciones externas para evitar conflictos
 */

// ============================================================================
// FUNCIONES LOCALES PARA EVITAR CONFLICTOS
// ============================================================================

/**
 * Funci√≥n local para obtener el token (no interfiere con otras)
 */
function getAuthTokenLocal() {
    return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
}

/**
 * Funci√≥n local para verificar autenticaci√≥n
 */
function checkAuthLocal() {
    const token = getAuthTokenLocal();
    if (!token) {
        console.log('‚ùå No hay token, redirigiendo al login...');
        window.location.href = '/login';
        return false;
    }
    return true;
}

/**
 * Funci√≥n local para hacer peticiones API (solo para este m√≥dulo)
 */
async function apiRequestLocal(endpoint, options = {}) {
    const API_BASE_URL = '/api';
    const fullUrl = `${API_BASE_URL}${endpoint}`;
    const token = getAuthTokenLocal();
    
    if (!token) {
        console.error('‚ùå No hay token de autenticaci√≥n');
        window.location.href = '/login';
        return;
    }
    
    try {
        const response = await fetch(fullUrl, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
                ...options.headers,
            }
        });
        
        if (response.status === 401 || response.status === 403) {
            console.error('‚ùå Token inv√°lido o expirado');
            localStorage.removeItem('authToken');
            sessionStorage.removeItem('authToken');
            window.location.href = '/login';
            return;
        }
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status} for ${fullUrl}`);
        }
        
        return await response.json();
        
    } catch (error) {
        console.error(`üí• Petici√≥n fall√≥ para ${fullUrl}:`, error);
        throw error;
    }
}

// ============================================================================
// FUNCIONES PRINCIPALES DE GESTI√ìN DE ADMIN
// ============================================================================

/**
 * Solo los usuarios administradores podr√°n ver las opciones de administraci√≥n.
 * Usa funciones locales para evitar dependencias externas.
 * 
 * @returns {Promise<void>}
 */
async function toggleAdminSection() {
    console.log('üîç [ADMIN] Iniciando toggleAdminSection...');
    
    try {
        const adminSection = document.getElementById('admin-section');
        console.log('üîç [ADMIN] Admin section encontrado:', !!adminSection);
        
        if (!adminSection) {
            console.warn('‚ö†Ô∏è No se encontr√≥ el elemento admin-section en el DOM');
            return;
        }

        console.log('üîç [ADMIN] Haciendo petici√≥n a /users/me...');
        
        // Usar funci√≥n local para evitar dependencias
        const userData = await apiRequestLocal('/users/me');
        console.log('üîç [ADMIN] Respuesta usuario:', userData);

        // Verificar rol - adaptarse a diferentes estructuras de respuesta
        const isAdmin = userData && (userData.role === 'admin' || userData.isAdmin === true);
        
        if (!isAdmin) {
            console.log('üë§ [ADMIN] Usuario sin permisos de admin, ocultando secci√≥n');
            adminSection.classList.add('hidden');
            adminSection.classList.remove('block');
            return;
        }

        // Mostrar secci√≥n si es admin
        console.log('üëë [ADMIN] Usuario admin detectado, mostrando secci√≥n');
        adminSection.classList.remove('hidden');
        adminSection.classList.add('block');

    } catch (error) {
        console.error('‚ùå Error al verificar permisos de administrador:', error);
        const adminSection = document.getElementById('admin-section');
        if (adminSection) {
            adminSection.classList.add('hidden');
            adminSection.classList.remove('block');
        }
    }
}

/**
 * Inicializa la gesti√≥n de administraci√≥n
 */
async function initializeAdminManagement() {
    console.log('üöÄ [ADMIN] Inicializando gesti√≥n de administraci√≥n...');
    
    // Verificar autenticaci√≥n con funci√≥n local
    if (!checkAuthLocal()) {
        return;
    }
    
    // Gestionar secci√≥n de admin
    await toggleAdminSection();
}

// ============================================================================
// FUNCIONES P√öBLICAS PARA USO EXTERNO (OPCIONALES)
// ============================================================================

/**
 * Funci√≥n p√∫blica para verificar si el usuario actual es admin
 * Puede ser llamada desde otros scripts sin conflictos
 * @returns {Promise<boolean>}
 */
async function isCurrentUserAdmin() {
    try {
        const userData = await apiRequestLocal('/users/me');
        return userData && (userData.role === 'admin' || userData.isAdmin === true);
    } catch (error) {
        console.error('‚ùå [ADMIN] Error verificando si es admin:', error);
        return false;
    }
}

/**
 * Muestra u oculta elementos basado en permisos de admin
 * @param {string} elementId - ID del elemento a mostrar/ocultar
 */
async function toggleAdminElement(elementId) {
    const element = document.getElementById(elementId);
    if (!element) {
        console.warn(`‚ö†Ô∏è [ADMIN] Elemento ${elementId} no encontrado`);
        return;
    }
    
    try {
        const isAdmin = await isCurrentUserAdmin();
        
        if (isAdmin) {
            element.classList.remove('hidden');
            element.classList.add('block');
        } else {
            element.classList.add('hidden');
            element.classList.remove('block');
        }
    } catch (error) {
        console.error(`‚ùå [ADMIN] Error toggleando elemento ${elementId}:`, error);
        // En caso de error, ocultar por seguridad
        element.classList.add('hidden');
        element.classList.remove('block');
    }
}

// ============================================================================
// INICIALIZACI√ìN AUTOM√ÅTICA
// ============================================================================

/**
 * Inicializaci√≥n autom√°tica que no depende de funciones externas
 */
(function initAdminManagement() {
    console.log('üöÄ [ADMIN] Auto-inicializando gesti√≥n de administraci√≥n...');
    console.log('üîç [ADMIN] Estado del DOM:', document.readyState);
    console.log('üîç [ADMIN] URL actual:', window.location.pathname);
    
    function executeInitialization() {
        console.log('‚ö° [ADMIN] Ejecutando inicializaci√≥n...');
        initializeAdminManagement().catch(error => {
            console.error('‚ùå [ADMIN] Error en inicializaci√≥n:', error);
        });
    }
    
    if (document.readyState === 'loading') {
        console.log('‚è≥ [ADMIN] DOM cargando, esperando DOMContentLoaded...');
        document.addEventListener('DOMContentLoaded', executeInitialization);
    } else {
        console.log('‚úÖ [ADMIN] DOM ya cargado, ejecutando inmediatamente...');
        // Peque√±o delay para asegurar que el DOM est√© completamente listo
        setTimeout(executeInitialization, 100);
    }
})();

console.log('‚úÖ [ADMIN] Script de gesti√≥n de administraci√≥n cargado');