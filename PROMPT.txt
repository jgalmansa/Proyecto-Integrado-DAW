PETICIÓN:
Hemos eliminado docker del proyecto y queremos que siga funcionando.

Te vuelvo a mostrar el enunciado del proyecto:
Desarrollaremos una aplicación web para la gestión integral de reservas de espacios de trabajo colaborativo, que incluirá salas de reuniones, áreas de coworking y otros recursos. La plataforma permitirá a los usuarios:
* Consultar en tiempo real: Visualizar la disponibilidad de cada espacio mediante un calendario interactivo.
* Realizar reservas: Efectuar, modificar o cancelar reservas de manera sencilla.
* Sincronización con calendarios externos: Integrar servicios como Google Calendar para evitar solapamientos y gestionar eventos.
* Recibir notificaciones: Obtener alertas y recordatorios sobre sus reservas mediante correos electrónicos o notificaciones push.
Esta solución se orienta a optimizar el uso de espacios colaborativos, garantizando una experiencia intuitiva, segura y responsive, y abriendo la puerta a futuras integraciones y mejoras en la gestión de recursos.
Los usuarios podrán ser administradores (usuarios con privilegios) o usuarios (sin privilegios). Los administradores, serán los usuarios que gestionan los espacios, añadiendo, editando o eliminándolos. También gestionarán a los demás usuarios, creándolos, editándolos, eliminándolos y dándole los permisos. Los usuarios, simplemente tendrán su perfil y podrán reservar un espacio, editar una reserva o eliminarla.
Cada usuario tiene su cuenta. En ella podrá ver un dashboard con un calendario, los espacios de trabajo, las reservas actuales y sus notificaciones.
· Calendario: Se podrá hacer una reserva rápida. Seleccionando el día y la hora, aparecerán los espacios disponibles ese día en esa hora.
· Espacios de trabajo: Se podrá seleccionar el espacio de trabajo y acceder a su información. Desde ahí, se podrá realizar la reserva.
· Mis reservas: Aparecen tus reservas con espacio, fecha y tiempo estimado de la reserva. Podrás ver mas detalles. Posibilidad de ver historial.
· Notificaciones: Panel con las notificaciones, informativas. Posibilidad de ver todas.
Notificaciones (personales): Recordatorios de la reserva.
Notificaciones globales (informativas): Espacio inutilizable (por ejemplo).
REGISTROS:
En la aplicación te podras registrar como empresa o como usuario.
-Empresa: Datos de empresa y primer administrador. El administrador debe indicar que dominios están permitidos.
-Usuario: Administrador crea código de invitación, el usuario se registra con correo y código de invitación. Al ser correcto todo, procedes a indicar la contraseña.
-Contraseña y confirmar contraseña.
CODIGO DE INVITACION:
- Debe ser único.
- De un solo uso?
- Maximo de usos?
- Caducidad por tiempo?
LOGIN:
Correo y contraseña
TECNOLOGIAS:
Frontend: HTML5 y Tailwind.
Backend: Node.js con Express.
Base de datos: PostgreSQL y Sequelize.

La estructura actual del proyecto es:
PS C:\Users\Jose M\Desktop\PI\Proyecto-Integrado-DAW> Show-Tree
└─ backend
  └─ config
    └─ config.js
    └─ db.js
  └─ migrations
    └─ 20250402185916-create-companies.cjs
    └─ 20250402185950-create-users.cjs
    └─ 20250402190011-create-domains.cjs
    └─ 20250402190029-create-workspaces.cjs
    └─ 20250402190046-create-reservations.cjs
    └─ 20250402190108-create-notifications.cjs
    └─ 20250522090632-create-user-sessions.cjs
  └─ models
    └─ company.js
    └─ domain.js
    └─ index.js
    └─ notification.js
    └─ reservation.js
    └─ user.js
    └─ userSession.js
    └─ workspace.js
  └─ seeders
    └─ 20250515000001-seed-companies.cjs
    └─ 20250515000002-seed-domains.cjs
    └─ 20250515000003-seed-users.cjs
    └─ 20250515000004-seed-workspaces.cjs
  └─ src
    └─ config
      └─ vacio.txt
    └─ controllers
      └─ companyController.js
      └─ notificationController.js
      └─ reservationController.js
      └─ userController.js
      └─ workspaceController.js
    └─ middlewares
      └─ authMiddleware.js
      └─ companyValidationMiddleware.js
      └─ reservationValidationMiddleware.js
      └─ userValidationMiddleware.js
      └─ workspaceValidationMiddleware.js
    └─ models
      └─ vacio.txt
    └─ routes
      └─ companyRoutes.js
      └─ notificationRoutes.js
      └─ reservationRoutes.js
      └─ userRoutes.js
      └─ workspaceRoutes.js
    └─ services
      └─ authService.js
      └─ notificationService.js
      └─ redisService.js
      └─ vacio.txt
    └─ utils
      └─ invitationCodeGenerator.js
      └─ scheduler.js
  └─ PROMPT.txt
└─ frontend
  └─ public
    └─ css
      └─ output.css
    └─ pages
      └─ register.html
    └─ index.html
  └─ src
    └─ input.css
└─ node_modules
└─ .gitignore
└─ index.js
└─ package.json
└─ README.md

La base de datos: 
-- Optional: Create the database
CREATE DATABASE coworkly;

-- Connect to the database (in psql)
\c coworkly;

-- Table: Companies
CREATE TABLE companies (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    address TEXT,
    phone VARCHAR(20),
    invitation_code VARCHAR(50) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

-- Table: Users
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100),
    company_id INTEGER NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    role VARCHAR(10) CHECK (role IN ('admin', 'user')) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

-- Table: Domains
CREATE TABLE domains (
    id SERIAL PRIMARY KEY,
    company_id INTEGER NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    domain VARCHAR(255) UNIQUE NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

-- Table: Workspaces
CREATE TABLE workspaces (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    capacity INTEGER NOT NULL,
    company_id INTEGER NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
    qr VARCHAR(255) UNIQUE,
    is_available BOOLEAN DEFAULT TRUE,
    equipment JSONB, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

-- Table: Reservations
CREATE TABLE reservations (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    workspace_id INTEGER NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    guests TEXT,
    number_of_people INTEGER NOT NULL,
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    status VARCHAR(20) CHECK (status IN ('pending', 'confirmed', 'cancelled')) NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

-- Table: Notifications
CREATE TABLE notifications (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    type VARCHAR(10) CHECK (type IN ('global', 'personal')) NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    reservation_id INTEGER REFERENCES reservations(id) ON DELETE SET NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP DEFAULT NULL
);

Ahora tenemos otra tabla, te muestro el migrate:
'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('user_sessions', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      user_id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        references: {
          model: 'users',
          key: 'id'
        },
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
      },
      token: {
        type: Sequelize.TEXT,
        allowNull: false,
        unique: true
      },
      status: {
        type: Sequelize.ENUM('active', 'inactive', 'expired'),
        allowNull: false,
        defaultValue: 'active'
      },
      created_at: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
      },
      updated_at: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP')
      }
    });

    // Índices para mejorar performance
    await queryInterface.addIndex('user_sessions', ['token']);
    await queryInterface.addIndex('user_sessions', ['user_id']);
    await queryInterface.addIndex('user_sessions', ['status']);
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('user_sessions');
  }
};

Responde en español.
Estamos usando type module.
Si necesitas ver algun archivo para continuar dimelo.

Al ejecutar index.js me da este error:
PS C:\Users\jose.gijon\Desktop\proyecto\Proyecto-Integrado-DAW> npm run start

> coworkly-project@1.0.0 start
> node index.js

node:internal/modules/esm/resolve:275
    throw new ERR_MODULE_NOT_FOUND(
          ^

Error [ERR_MODULE_NOT_FOUND]: Cannot find module 'C:\Users\jose.gijon\Desktop\proyecto\Proyecto-Integrado-DAW\config\db.js' imported from C:\Users\jose.gijon\Desktop\proyecto\Proyecto-Integrado-DAW\index.js
    at finalizeResolution (node:internal/modules/esm/resolve:275:11)
    at moduleResolve (node:internal/modules/esm/resolve:932:10)
    at defaultResolve (node:internal/modules/esm/resolve:1056:11)
    at ModuleLoader.defaultResolve (node:internal/modules/esm/loader:654:12)
    at #cachedDefaultResolve (node:internal/modules/esm/loader:603:25)
    at ModuleLoader.resolve (node:internal/modules/esm/loader:586:38)
    at ModuleLoader.getModuleJobForImport (node:internal/modules/esm/loader:242:38)
    at ModuleJob._link (node:internal/modules/esm/module_job:135:49) {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///C:/Users/jose.gijon/Desktop/proyecto/Proyecto-Integrado-DAW/config/db.js'
}

Node.js v22.13.0